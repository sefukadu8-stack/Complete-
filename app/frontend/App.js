Now let me create the React frontend that matches your original design exactly:
Action: bulk_file_creator ["/app/frontend/src/App.js"] ['import React, { useState, useEffect, useMemo } from \'react\';\nimport axios from \'axios\';\nimport \'./App.css\';\n\n// Get backend URL from environment\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || \'http://localhost:8001\';\n\nfunction App() {\n  // State management\n  const [products, setProducts] = useState([]);\n  const [cart, setCart] = useState([]);\n  const [wishlist, setWishlist] = useState([]);\n  const [settings, setSettings] = useState({\n    store_name: "AURA FASHION",\n    store_tagline: "Premium Collection",\n    whatsapp_number: "+918780813692",\n    email: "sefudinkadu@gmail.com",\n    phone: "+91 8780813692"\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentFilter, setCurrentFilter] = useState(\'all\');\n  const [currentSort, setCurrentSort] = useState(\'default\');\n  const [searchTerm, setSearchTerm] = useState(\'\');\n  const [selectedProduct, setSelectedProduct] = useState(null);\n  const [showProductModal, setShowProductModal] = useState(false);\n  const [showCartSidebar, setShowCartSidebar] = useState(false);\n  const [showWishlistSidebar, setShowWishlistSidebar] = useState(false);\n  const [showAdminModal, setShowAdminModal] = useState(false);\n  const [isAdminLoggedIn, setIsAdminLoggedIn] = useState(false);\n  const [adminToken, setAdminToken] = useState(localStorage.getItem(\'adminToken\'));\n  const [adminTab, setAdminTab] = useState(\'dashboard\');\n  const [showMobileMenu, setShowMobileMenu] = useState(false);\n  const [showDeliveryForm, setShowDeliveryForm] = useState(false);\n  const [deliveryFormData, setDeliveryFormData] = useState({\n    fullName: \'\',\n    mobileNo: \'\',\n    alternateNo: \'\',\n    houseNo: \'\',\n    streetArea: \'\',\n    landmark: \'\',\n    city: \'\',\n    state: \'\',\n    pinCode: \'\',\n    paymentMode: \'COD\'\n  });\n\n  // Load data on component mount\n  useEffect(() => {\n    loadProducts();\n    loadSettings();\n    loadCartFromStorage();\n    loadWishlistFromStorage();\n    \n    // Hide loading screen after 2 seconds\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 2000);\n  }, []);\n\n  // API calls\n  const loadProducts = async () => {\n    try {\n      const response = await axios.get(`${BACKEND_URL}/api/products`);\n      setProducts(response.data);\n    } catch (error) {\n      console.error(\'Error loading products:\', error);\n    }\n  };\n\n  const loadSettings = async () => {\n    try {\n      const response = await axios.get(`${BACKEND_URL}/api/settings`);\n      setSettings(response.data);\n    } catch (error) {\n      console.error(\'Error loading settings:\', error);\n    }\n  };\n\n  // Cart and Wishlist functions\n  const loadCartFromStorage = () => {\n    const savedCart = localStorage.getItem(\'cart\');\n    if (savedCart) {\n      setCart(JSON.parse(savedCart));\n    }\n  };\n\n  const loadWishlistFromStorage = () => {\n    const savedWishlist = localStorage.getItem(\'wishlist\');\n    if (savedWishlist) {\n      setWishlist(JSON.parse(savedWishlist));\n    }\n  };\n\n  const saveCartToStorage = (cartData) => {\n    localStorage.setItem(\'cart\', JSON.stringify(cartData));\n  };\n\n  const saveWishlistToStorage = (wishlistData) => {\n    localStorage.setItem(\'wishlist\', JSON.stringify(wishlistData));\n  };\n\n  const addToCart = (productId, selectedSize) => {\n    const product = products.find(p => p.id === productId);\n    if (!product || !selectedSize) {\n      showNotification(\'Please select a size\', \'warning\');\n      return;\n    }\n\n    const existingItem = cart.find(item => item.id === productId && item.size === selectedSize);\n    let newCart;\n\n    if (existingItem) {\n      newCart = cart.map(item =>\n        item.id === productId && item.size === selectedSize\n          ? { ...item, quantity: item.quantity + 1 }\n          : item\n      );\n    } else {\n      newCart = [...cart, {\n        id: productId,\n        name: product.name,\n        price: product.price,\n        size: selectedSize,\n        quantity: 1,\n        image: product.images[0] || \'\'\n      }];\n    }\n\n    setCart(newCart);\n    saveCartToStorage(newCart);\n    showNotification(`${product.name} added to cart!`, \'success\');\n  };\n\n  const removeFromCart = (productId, size) => {\n    const newCart = cart.filter(item => !(item.id === productId && item.size === size));\n    setCart(newCart);\n    saveCartToStorage(newCart);\n    showNotification(\'Item removed from cart\', \'info\');\n  };\n\n  const updateQuantity = (productId, size, newQuantity) => {\n    if (newQuantity <= 0) {\n      removeFromCart(productId, size);\n      return;\n    }\n\n    const newCart = cart.map(item =>\n      item.id === productId && item.size === size\n        ? { ...item, quantity: newQuantity }\n        : item\n    );\n    setCart(newCart);\n    saveCartToStorage(newCart);\n  };\n\n  const toggleWishlist = (productId) => {\n    const product = products.find(p => p.id === productId);\n    if (!product) return;\n\n    const existingIndex = wishlist.findIndex(item => item.id === productId);\n    let newWishlist;\n\n    if (existingIndex > -1) {\n      newWishlist = wishlist.filter(item => item.id !== productId);\n      showNotification(\'Removed from wishlist\', \'info\');\n    } else {\n      newWishlist = [...wishlist, {\n        id: product.id,\n        name: product.name,\n        price: product.price,\n        image: product.images[0] || \'\'\n      }];\n      showNotification(\'Added to wishlist!\', \'success\');\n    }\n\n    setWishlist(newWishlist);\n    saveWishlistToStorage(newWishlist);\n  };\n\n  // Product filtering and sorting\n  const filteredProducts = useMemo(() => {\n    let filtered = products;\n\n    // Apply search filter\n    if (searchTerm) {\n      filtered = filtered.filter(product =>\n        product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        product.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        product.category.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    // Apply category filter\n    if (currentFilter !== \'all\') {\n      filtered = filtered.filter(product => product.category === currentFilter);\n    }\n\n    // Apply sorting\n    switch (currentSort) {\n      case \'price-low\':\n        filtered.sort((a, b) => a.price - b.price);\n        break;\n      case \'price-high\':\n        filtered.sort((a, b) => b.price - a.price);\n        break;\n      case \'name\':\n        filtered.sort((a, b) => a.name.localeCompare(b.name));\n        break;\n      case \'rating\':\n        filtered.sort((a, b) => (b.rating || 0) - (a.rating || 0));\n        break;\n      case \'newest\':\n        filtered.sort((a, b) => new Date(b.date_added) - new Date(a.date_added));\n        break;\n      default:\n        break;\n    }\n\n    return filtered;\n  }, [products, searchTerm, currentFilter, currentSort]);\n\n  // Admin functions\n  const adminLogin = async (username, password) => {\n    try {\n      const response = await axios.post(`${BACKEND_URL}/api/admin/login`, {\n        username,\n        password\n      });\n      \n      const token = response.data.access_token;\n      setAdminToken(token);\n      setIsAdminLoggedIn(true);\n      localStorage.setItem(\'adminToken\', token);\n      \n      showNotification(\'Welcome to Admin Dashboard!\', \'success\');\n      return true;\n    } catch (error) {\n      showNotification(\'Invalid credentials! Please try again.\', \'error\');\n      return false;\n    }\n  };\n\n  const adminLogout = () => {\n    setAdminToken(null);\n    setIsAdminLoggedIn(false);\n    localStorage.removeItem(\'adminToken\');\n    setShowAdminModal(false);\n    showNotification(\'Admin logged out successfully\', \'info\');\n  };\n\n  // WhatsApp functions\n  const whatsappOrder = (productId, selectedSize) => {\n    const product = products.find(p => p.id === productId);\n    if (!product || !selectedSize) {\n      showNotification(\'Please select a size\', \'warning\');\n      return;\n    }\n\n    const message = `Hi! I want to order:\n\n📦 ${product.name}\n📏 Size: ${selectedSize}\n💰 Price: ₹${product.price.toLocaleString()}\n\nPlease confirm availability and delivery details.`;\n\n    const whatsappUrl = `https://wa.me/${settings.whatsapp_number.replace(\'+\', \'\')}?text=${encodeURIComponent(message)}`;\n    window.open(whatsappUrl, \'_blank\');\n  };\n\n  const whatsappCheckout = () => {\n    if (cart.length === 0) {\n      showNotification(\'Your cart is empty\', \'warning\');\n      return;\n    }\n\n    setShowDeliveryForm(true);\n  };\n\n  const submitDeliveryForm = () => {\n    // Validate form\n    if (!deliveryFormData.fullName || !deliveryFormData.mobileNo || !deliveryFormData.houseNo || \n        !deliveryFormData.streetArea || !deliveryFormData.city || !deliveryFormData.state || \n        !deliveryFormData.pinCode) {\n      showNotification(\'Please fill all required fields\', \'warning\');\n      return;\n    }\n\n    let message = `🛍️ *New Order from ${settings.store_name}*\\n\\n`;\n    let total = 0;\n\n    cart.forEach((item, index) => {\n      message += `${index + 1}. *${item.name}*\\n`;\n      message += `   📏 Size: ${item.size}\\n`;\n      message += `   📦 Quantity: ${item.quantity}\\n`;\n      message += `   💰 Price: ₹${(item.price * item.quantity).toLocaleString()}\\n\\n`;\n      total += item.price * item.quantity;\n    });\n\n    message += `💳 *Total: ₹${total.toLocaleString()}*\\n\\n`;\n    message += `📋 *Delivery Details:*\\n`;\n    message += `👤 Name: ${deliveryFormData.fullName}\\n`;\n    message += `📱 Mobile: ${deliveryFormData.mobileNo}\\n`;\n    if (deliveryFormData.alternateNo) {\n      message += `📞 Alternate: ${deliveryFormData.alternateNo}\\n`;\n    }\n    message += `🏠 Address: ${deliveryFormData.houseNo}, ${deliveryFormData.streetArea}\\n`;\n    if (deliveryFormData.landmark) {\n      message += `📍 Landmark: ${deliveryFormData.landmark}\\n`;\n    }\n    message += `🏙️ City: ${deliveryFormData.city}\\n`;\n    message += `📍 State: ${deliveryFormData.state}\\n`;\n    message += `📮 PIN: ${deliveryFormData.pinCode}\\n`;\n    message += `💳 Payment: ${deliveryFormData.paymentMode}\\n\\n`;\n    message += `🚚 Please confirm the order and arrange delivery.`;\n\n    const whatsappUrl = `https://wa.me/${settings.whatsapp_number.replace(\'+\', \'\')}?text=${encodeURIComponent(message)}`;\n    window.open(whatsappUrl, \'_blank\');\n\n    // Clear cart and form\n    setCart([]);\n    saveCartToStorage([]);\n    setDeliveryFormData({\n      fullName: \'\', mobileNo: \'\', alternateNo: \'\', houseNo: \'\', streetArea: \'\',\n      landmark: \'\', city: \'\', state: \'\', pinCode: \'\', paymentMode: \'COD\'\n    });\n    setShowDeliveryForm(false);\n    setShowCartSidebar(false);\n    \n    showNotification(\'Order sent via WhatsApp!\', \'success\');\n  };\n\n  // Utility functions\n  const showNotification = (message, type = \'success\') => {\n    // Simple notification implementation\n    const notification = document.createElement(\'div\');\n    notification.className = `notification ${type}`;\n    notification.innerHTML = `\n      <i class="notification-icon fas ${type === \'success\' ? \'fa-check-circle\' : \n                                      type === \'error\' ? \'fa-exclamation-circle\' : \n                                      type === \'warning\' ? \'fa-exclamation-triangle\' : \n                                      \'fa-info-circle\'}"></i>\n      <div>\n        <strong>${type.charAt(0).toUpperCase() + type.slice(1)}</strong>\n        <p>${message}</p>\n      </div>\n    `;\n\n    const container = document.getElementById(\'notification-container\');\n    if (container) {\n      container.appendChild(notification);\n      setTimeout(() => notification.classList.add(\'show\'), 100);\n      setTimeout(() => {\n        notification.classList.remove(\'show\');\n        setTimeout(() => container.removeChild(notification), 300);\n      }, 4000);\n    }\n  };\n\n  const generateStars = (rating) => {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n    let stars = [];\n\n    for (let i = 0; i < fullStars; i++) {\n      stars.push(<i key={i} className="fas fa-star"></i>);\n    }\n\n    if (hasHalfStar) {\n      stars.push(<i key="half" className="fas fa-star-half-alt"></i>);\n    }\n\n    const emptyStars = 5 - Math.ceil(rating);\n    for (let i = 0; i < emptyStars; i++) {\n      stars.push(<i key={`empty-${i}`} className="far fa-star"></i>);\n    }\n\n    return stars;\n  };\n\n  const cartTotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n  const cartItemCount = cart.reduce((sum, item) => sum + item.quantity, 0);\n\n  return (\n    <div className="App">\n      {/* Loading Screen */}\n      {isLoading && (\n        <div className="loading-screen">\n          <div className="loading-content">\n            <div className="loading-logo">AURA FASHION</div>\n            <div className="loading-spinner"></div>\n            <div className="loading-text">Loading your fashion experience...</div>\n          </div>\n        </div>\n      )}\n\n      {/* Header */}\n      <header className="header">\n        <div className="header-top">\n          <div className="container">\n            <div className="header-top-content">\n              <div className="header-info">\n                <span><i className="fas fa-phone"></i> {settings.phone}</span>\n                <span><i className="fas fa-envelope"></i> {settings.email}</span>\n              </div>\n              <div className="header-social">\n                <a href="#" onClick={() => window.open(`https://wa.me/${settings.whatsapp_number.replace(\'+\', \'\')}`, \'_blank\')}>\n                  <i className="fab fa-whatsapp"></i>\n                </a>\n                <a href="#"><i className="fab fa-instagram"></i></a>\n                <a href="#"><i className="fab fa-facebook"></i></a>\n                <a href="#"><i className="fab fa-pinterest"></i></a>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <nav className="navbar">\n          <div className="container">\n            <div className="nav-content">\n              <div className="logo">\n                <h1>{settings.store_name}</h1>\n                <span>{settings.store_tagline}</span>\n              </div>\n              \n              <ul className={`nav-menu ${showMobileMenu ? \'active\' : \'\'}`}>\n                <li><a href="#home" className="nav-link active"><i className="fas fa-home"></i> Home</a></li>\n                <li><a href="#products" className="nav-link"><i className="fas fa-shopping-bag"></i> Products</a></li>\n                <li><a href="#about" className="nav-link"><i className="fas fa-info-circle"></i> About</a></li>\n                <li><a href="#contact" className="nav-link"><i className="fas fa-phone"></i> Contact</a></li>\n              </ul>\n              \n              <div className="nav-actions">\n                <div className="search-container">\n                  <input \n                    type="text" \n                    className="search-input" \n                    placeholder="Search products..."\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                  />\n                  <button className="search-btn"><i className="fas fa-search"></i></button>\n                </div>\n                \n                <button \n                  className="action-btn" \n                  onClick={() => setShowWishlistSidebar(true)}\n                  title="Wishlist"\n                >\n                  <i className="fas fa-heart"></i>\n                  {wishlist.length > 0 && <span className="badge">{wishlist.length}</span>}\n                </button>\n                \n                <button \n                  className="action-btn" \n                  onClick={() => setShowCartSidebar(true)}\n                  title="Cart"\n                >\n                  <i className="fas fa-shopping-cart"></i>\n                  {cartItemCount > 0 && <span className="badge">{cartItemCount}</span>}\n                </button>\n                \n                <button \n                  className="action-btn admin-btn" \n                  onClick={() => setShowAdminModal(true)}\n                  title="Admin Panel"\n                >\n                  <i className="fas fa-cog"></i> Admin\n                </button>\n              </div>\n              \n              <button \n                className={`mobile-menu-btn ${showMobileMenu ? \'active\' : \'\'}`}\n                onClick={() => setShowMobileMenu(!showMobileMenu)}\n              >\n                <span></span>\n                <span></span>\n                <span></span>\n              </button>\n            </div>\n          </div>\n        </nav>\n      </header>\n\n      {/* Hero Section */}\n      <section className="hero" id="home">\n        <div className="hero-bg"></div>\n        <div className="container">\n          <div className="hero-content">\n            <div className="hero-text">\n              <span className="hero-subtitle">New Collection 2024</span>\n              <h1 className="hero-title">Discover Your <span className="gradient-text">Elegance</span></h1>\n              <p className="hero-description">Premium handcrafted kurta sets that blend traditional artistry with contemporary fashion. Each piece tells a story of elegance and sophistication.</p>\n              <div className="hero-buttons">\n                <button className="btn btn-primary" onClick={() => document.getElementById(\'products\').scrollIntoView({behavior: \'smooth\'})}>\n                  <span>Shop Now</span>\n                  <i className="fas fa-arrow-right"></i>\n                </button>\n                <button className="btn btn-outline" onClick={() => document.getElementById(\'products\').scrollIntoView({behavior: \'smooth\'})}>\n                  <span>View Collection</span>\n                </button>\n              </div>\n            </div>\n            <div className="hero-stats">\n              <div className="stat-item">\n                <span className="stat-number">{products.length}+</span>\n                <span className="stat-label">Premium Designs</span>\n              </div>\n              <div className="stat-item">\n                <span className="stat-number">4.5★</span>\n                <span className="stat-label">Customer Rating</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className="hero-scroll">\n          <span>Scroll Down</span>\n          <div className="scroll-indicator"></div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className="features">\n        <div className="container">\n          <div className="features-grid">\n            <div className="feature-card">\n              <div className="feature-icon">\n                <i className="fas fa-shipping-fast"></i>\n              </div>\n              <h3>Free Shipping</h3>\n              <p>Free delivery on orders above ₹1999</p>\n            </div>\n            <div className="feature-card">\n              <div className="feature-icon">\n                <i className="fas fa-undo"></i>\n              </div>\n              <h3>Easy Returns</h3>\n              <p>7-day return policy</p>\n            </div>\n            <div className="feature-card">\n              <div className="feature-icon">\n                <i className="fas fa-award"></i>\n              </div>\n              <h3>Premium Quality</h3>\n              <p>Handcrafted with finest materials</p>\n          
